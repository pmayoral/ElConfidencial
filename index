<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>📰 Última Hora - El Confidencial</title>
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #28a745 0%, #218838 100%);
            --gray-gradient: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            --background-gradient: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            --border-radius: 12px;
            --transition: all 0.3s ease;
            --shadow-light: 0 5px 15px rgba(0,0,0,0.08);
            --shadow-hover: 0 15px 30px rgba(0,0,0,0.15);
            --shadow-modal: 0 20px 40px rgba(0,0,0,0.3);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: var(--primary-gradient);
            min-height: 100vh;
        }

        .container {
            max-width: 100%;
            margin: 0;
            background: white;
            overflow: hidden;
        }

        header {
            background: var(--primary-gradient);
            color: white;
            padding: 10px 30px;
            text-align: center;
        }

        h1 {
            font-size: 1.8rem;
            margin-bottom: 2px;
            font-weight: 700;
        }

        .subtitle {
            font-size: 0.9rem;
            opacity: 0.9;
            font-weight: 300;
        }

        .stats {
            background: #f8f9fa;
            padding: 8px 30px;
            text-align: center;
            font-weight: 500;
            color: #495057;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
        }

        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid #e9ecef;
            border-top: 2px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .controls {
            padding: 15px 30px;
            background: var(--background-gradient);
            border-bottom: 1px solid #dee2e6;
            text-align: center;
        }

        .main-controls-title {
            margin: 0 0 12px 0;
            color: #495057;
            font-size: 1.1rem;
            font-weight: 600;
            text-align: center;
        }

        .main-controls-container {
            display: flex;
            justify-content: center;
            align-items: flex-end;
            gap: 20px;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .filter-group label {
            font-weight: 500;
            font-size: 0.9rem;
            color: #333;
            margin-left: 5px;
        }

        .sections-count-badge {
            background: #667eea;
            color: white;
            border-radius: 10px;
            padding: 2px 8px;
            font-size: 0.75rem;
            font-weight: 600;
            vertical-align: middle;
            margin-left: 5px;
        }

        /* Dropdown */
        .sections-dropdown {
            position: relative;
            width: 280px;
        }

        .dropdown-toggle {
            width: 100%;
            background: white;
            border: 2px solid #e9ecef;
            border-radius: var(--border-radius);
            padding: 10px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.9rem;
            font-weight: 500;
            color: #495057;
        }

        .dropdown-toggle:hover {
            border-color: #667eea;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.15);
        }

        .dropdown-arrow {
            transition: transform 0.3s ease;
            font-size: 0.8rem;
            color: #6c757d;
        }

        .dropdown-toggle.active .dropdown-arrow {
            transform: rotate(180deg);
        }

        .dropdown-menu {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 2px solid #e9ecef;
            border-top: none;
            border-radius: 0 0 var(--border-radius) var(--border-radius);
            max-height: 300px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .dropdown-menu.show {
            display: block;
        }

        .dropdown-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 16px;
            cursor: pointer;
            transition: all 0.2s ease;
            border-bottom: 1px solid #f8f9fa;
        }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        .dropdown-item:hover {
            background: #f8f9fa;
        }

        .dropdown-item.active {
            background: var(--primary-gradient);
            color: white;
        }

        .section-icon {
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }

        .section-name {
            flex: 1;
            font-weight: 500;
            text-transform: capitalize;
        }

        .section-count {
            background: rgba(255, 255, 255, 0.2);
            color: inherit;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: 600;
        }

        .dropdown-item.active .section-count {
            background: rgba(255, 255, 255, 0.3);
        }

        .news-grid {
            padding: 30px;
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 20px;
        }

        .news-item {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: var(--shadow-light);
            transition: var(--transition);
            border: 1px solid #e9ecef;
            cursor: pointer;
        }

        .news-item:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-hover);
        }

        .news-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .news-source {
            background: var(--primary-gradient);
            color: white;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: capitalize;
        }

        .news-date {
            color: #6c757d;
            font-size: 0.85rem;
            font-weight: 500;
            white-space: pre-line;
            text-align: right;
            line-height: 1.3;
        }

        .news-headline {
            font-size: 1.1rem;
            font-weight: 700;
            color: #212529;
            margin-bottom: 10px;
            line-height: 1.4;
        }

        .news-summary {
            font-size: 0.9rem;
            color: #495057;
            line-height: 1.5;
            display: -webkit-box;
            -webkit-line-clamp: 4;
            line-clamp: 4;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .loading-message, .error-message {
            text-align: center;
            padding: 50px;
            color: #6c757d;
            font-size: 1.1rem;
        }

        .error-message {
            color: #dc3545;
        }

        .error-message h3 {
            margin-bottom: 15px;
            color: #dc3545;
        }

        /* Buscador */
        .search-section {
            width: 280px;
        }

        .search-container {
            position: relative;
            display: flex;
            align-items: center;
            background: white;
            border: 2px solid #e9ecef;
            border-radius: var(--border-radius);
            padding: 8px 12px;
            transition: var(--transition);
        }

        .search-container:focus-within {
            border-color: #667eea;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.15);
        }

        .search-icon {
            font-size: 1rem;
            color: #6c757d;
            margin-right: 8px;
        }

        .search-input {
            flex: 1;
            border: none;
            outline: none;
            font-size: 0.9rem;
            color: #495057;
            background: transparent;
        }

        .search-input::placeholder {
            color: #adb5bd;
        }

        .search-clear {
            background: none;
            border: none;
            color: #adb5bd;
            cursor: pointer;
            padding: 4px;
            border-radius: 50%;
            font-size: 0.8rem;
            transition: all 0.2s ease;
            display: none;
        }

        .search-clear:hover {
            background: #f8f9fa;
            color: #6c757d;
        }

        .search-clear.show {
            display: block;
        }

        /* Toggle switch */
        .toggle-switch {
            display: flex;
            align-items: center;
            cursor: pointer;
            user-select: none;
            gap: 12px;
        }

        .toggle-switch input {
            display: none;
        }

        .slider {
            position: relative;
            width: 50px;
            height: 24px;
            background: #ccc;
            border-radius: 24px;
            transition: 0.3s;
        }

        .slider:before {
            content: "";
            position: absolute;
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background: white;
            border-radius: 50%;
            transition: 0.3s;
        }

        .toggle-switch input:checked + .slider {
            background: var(--primary-gradient);
        }

        .toggle-switch input:checked + .slider:before {
            transform: translateX(26px);
        }

        .label-text {
            font-weight: 500;
            color: #495057;
            font-size: 0.9rem;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background-color: white;
            margin: 2% auto;
            padding: 0;
            border-radius: 15px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow: hidden;
            box-shadow: var(--shadow-modal);
            animation: modalSlideIn 0.3s ease-out;
            display: flex;
            flex-direction: column;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            background: var(--primary-gradient);
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.3rem;
            font-weight: 700;
        }

        .modal-date {
            font-size: 0.9rem;
            opacity: 0.9;
            white-space: pre-line;
            line-height: 1.3;
        }

        .close {
            color: white;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 1;
        }

        .close:hover {
            opacity: 0.7;
        }

        .modal-body {
            padding: 30px;
            max-height: 60vh;
            overflow-y: auto;
            flex: 1;
        }

        .modal-content-text {
            line-height: 1.8;
            color: #333;
            font-size: 1rem;
        }

        .modal-content-text p {
            margin-bottom: 1em;
        }

        .article-metadata {
            background: #f8f9fa;
            padding: 8px 20px;
            border-radius: 10px;
            margin-bottom: 10px;
            border-left: 4px solid #667eea;
        }

        .article-author {
            font-size: 0.95rem;
            margin-bottom: 0px;
            color: #495057;
        }

        .article-dates {
            font-size: 0.9rem;
            color: #6c757d;
            line-height: 1.0;
            margin-bottom: 0px;
        }

        .article-content {
            line-height: 1.8;
            color: #333;
        }

        .article-content img {
            max-width: 100%;
            height: auto;
            margin: 15px 0;
            border-radius: 8px;
        }

        .article-content figure {
            margin: 20px 0;
        }

        .article-content figcaption {
            font-size: 0.85rem;
            color: #6c757d;
            text-align: center;
            padding: 5px 0;
        }

        .modal-footer {
            background: #f8f9fa;
            padding: 20px 30px;
            border-top: 1px solid #e9ecef;
            flex-shrink: 0;
        }

        .modal-source {
            text-align: center;
        }

        .modal-source a {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
        }

        .modal-source a:hover {
            text-decoration: underline;
        }

        .highlight {
            background: linear-gradient(135deg, #ffd700 0%, #ffed4e 100%);
            padding: 2px 4px;
            border-radius: 4px;
            font-weight: 600;
            box-shadow: 0 1px 3px rgba(255, 215, 0, 0.3);
        }

        /* Responsive */
        @media (max-width: 1600px) {
            .news-grid {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        @media (max-width: 1200px) {
            .news-grid {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        @media (max-width: 900px) {
            .news-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 600px) {
            .news-grid {
                grid-template-columns: 1fr;
                padding: 20px;
            }

            h1 {
                font-size: 1.6rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>📰 Última Hora - El Confidencial</h1>
            <p class="subtitle">Noticias de última hora en tiempo real de El Confidencial</p>
        </header>

        <div class="stats" id="stats">
            <div class="loading-spinner" id="loadingSpinner"></div>
            <span id="statsText">Cargando noticias de última hora...</span>
        </div>

        <div class="controls" id="sectionsIndex">
            <div class="main-controls-container">
                <!-- Selector de secciones -->
                <div class="filter-group">
                    <label>Sección</label>
                    <div class="sections-dropdown">
                        <button class="dropdown-toggle" id="dropdownToggle">
                            <span class="dropdown-text">Todas las secciones</span>
                            <span class="dropdown-arrow">▼</span>
                        </button>
                        <div class="dropdown-menu" id="dropdownMenu">
                            <div class="dropdown-item active" data-section="todas">
                                <span class="section-icon">📰</span>
                                <span class="section-name">Todas las secciones</span>
                                <span class="section-count">0</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Buscador -->
                <div class="filter-group">
                    <label>Búsqueda</label>
                    <div class="search-section">
                        <div class="search-container">
                            <span class="search-icon">🔍</span>
                            <input type="text" id="searchInput" class="search-input" placeholder="Buscar en noticias..." />
                            <button class="search-clear" id="searchClear" title="Limpiar búsqueda">✕</button>
                        </div>
                    </div>
                </div>

                <!-- Filtros adicionales -->
                <div class="filter-group">
                    <label>Opciones</label>
                    <div class="additional-filters" style="display: flex; flex-direction: column; gap: 8px;">
                        <label class="toggle-switch">
                            <input type="checkbox" id="readModeToggle">
                            <span class="slider"></span>
                            <span class="label-text">Ventana emergente</span>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <div class="news-grid" id="newsContainer">
            <p class="loading-message">Cargando noticias de última hora...</p>
        </div>
    </div>

    <!-- Modal para leer noticia completa -->
    <div id="newsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div>
                    <div class="modal-title" id="modalTitle"></div>
                    <div class="modal-date" id="modalDate"></div>
                </div>
                <span class="close" id="closeModal">&times;</span>
            </div>
            <div class="modal-body">
                <div class="modal-content-text" id="modalContent"></div>
            </div>
            <div class="modal-footer">
                <div class="modal-source">
                    <a href="#" id="modalSourceLink" target="_blank">Ver noticia original en El Confidencial</a>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuración y variables globales
        const CONFIG = {
            CORS_PROXY: 'https://corsproxy.io/?',
            ELCONFIDENCIAL_URL: 'https://www.elconfidencial.com/ultima-hora-en-vivo/',
            SEARCH_DEBOUNCE: 300,
            AUTO_REFRESH: 300000 // 5 minutos
        };

        // Estado de la aplicación
        const state = {
            currentNewsData: [],
            currentSearchTerm: '',
            currentSection: 'todas',
            searchTimeout: null
        };

        // Cache de elementos DOM
        const elements = {};

        // Inicializar cache de elementos DOM
        function initDOMCache() {
            const selectors = {
                newsContainer: '#newsContainer',
                statsText: '#statsText',
                loadingSpinner: '#loadingSpinner',
                searchInput: '#searchInput',
                searchClear: '#searchClear',
                dropdownToggle: '#dropdownToggle',
                dropdownMenu: '#dropdownMenu',
                modal: '#newsModal',
                closeModal: '#closeModal',
                modalTitle: '#modalTitle',
                modalDate: '#modalDate',
                modalContent: '#modalContent',
                modalSourceLink: '#modalSourceLink',
                readModeToggle: '#readModeToggle'
            };

            Object.keys(selectors).forEach(key => {
                elements[key] = document.querySelector(selectors[key]);
            });
        }

        // Funciones de utilidad
        function showLoading() {
            if (elements.newsContainer) {
                elements.newsContainer.innerHTML = '<p class="loading-message">Cargando últimas noticias...</p>';
            }
            if (elements.statsText) {
                elements.statsText.textContent = 'Cargando...';
            }
            if (elements.loadingSpinner) {
                elements.loadingSpinner.style.display = 'block';
            }
        }

        function showError(message) {
            if (elements.newsContainer) {
                elements.newsContainer.innerHTML = `<div class="error-message"><h3>⚠️ Error</h3><p>${message}</p></div>`;
            }
            if (elements.statsText) {
                elements.statsText.textContent = 'Error al cargar noticias';
            }
            if (elements.loadingSpinner) {
                elements.loadingSpinner.style.display = 'none';
            }
        }

        function formatDateTime(dateString) {
            if (!dateString) {
                const now = new Date();
                const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false };
                const time = now.toLocaleTimeString('es-ES', timeOptions);
                return `Hoy - ${time}h`;
            }
            
            // Si ya está en formato "Hace X minutos/horas", devolverlo directamente
            if (dateString.match(/hace\s+\d+\s+(minuto|minutos|hora|horas|día|días)/i)) {
                return dateString.charAt(0).toUpperCase() + dateString.slice(1);
            }
            
            // Si es formato "Hoy - XX:XX", devolverlo directamente
            if (dateString.match(/hoy\s+-\s+\d{1,2}:\d{2}/i)) {
                return dateString;
            }
            
            // Si es solo una hora como "15:30" o "15:30h"
            if (dateString.match(/^\d{1,2}:\d{2}h?$/)) {
                return `Hoy - ${dateString}`;
            }
            
            // Intentar parsear fecha ISO o fecha estándar
            try {
                const date = new Date(dateString);
                if (!isNaN(date.getTime())) {
                    const now = new Date();
                    const diffMs = now - date;
                    const diffMins = Math.floor(diffMs / (1000 * 60));
                    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
                    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
                    
                    if (diffDays === 0 && diffHours < 24 && diffMins >= 0) {
                        if (diffMins < 1) {
                            return 'Hace 1 minuto';
                        } else if (diffMins < 60) {
                            return `Hace ${diffMins} ${diffMins === 1 ? 'minuto' : 'minutos'}`;
                        } else {
                            return `Hace ${diffHours} ${diffHours === 1 ? 'hora' : 'horas'}`;
                        }
                    }
                    
                    if (diffDays === 1) {
                        const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false };
                        const time = date.toLocaleTimeString('es-ES', timeOptions);
                        return `Ayer - ${time}h`;
                    }
                    
                    const dateOptions = { day: 'numeric', month: 'long' };
                    const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false };
                    
                    const formattedDate = date.toLocaleDateString('es-ES', dateOptions);
                    const formattedTime = date.toLocaleTimeString('es-ES', timeOptions);
                    
                    return `${formattedDate} - ${formattedTime}h`;
                }
            } catch (e) {
                const now = new Date();
                const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false };
                const time = now.toLocaleTimeString('es-ES', timeOptions);
                return `Hoy - ${time}h`;
            }
            
            return dateString.trim() || `Hoy - ${new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit', hour12: false })}h`;
        }

        function highlightText(text, searchTerm) {
            if (!searchTerm || searchTerm.length < 2) return text;
            const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
            return text.replace(regex, '<span class="highlight">$1</span>');
        }

        function getSectionName(sectionKey) {
            if (!sectionKey) return 'General';
            return sectionKey.split(' ')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join(' ');
        }

        function getSectionIcon(sectionKey) {
            if (!sectionKey) return '📰';
            const key = sectionKey.toLowerCase();
            
            const iconMap = {
                'mundo': '🌍',
                'españa': '🇪🇸',
                'espana': '🇪🇸',
                'madrid': '🏛️',
                'barcelona': '🏛️',
                'valencia': '🏛️',
                'andalucía': '🏛️',
                'andalucia': '🏛️',
                'cataluña': '🏛️',
                'cataluna': '🏛️',
                'empresa': '💼',
                'negocio': '💼',
                'economía': '💼',
                'economia': '💼',
                'fútbol': '⚽',
                'futbol': '⚽',
                'tenis': '🎾',
                'atletismo': '🏃',
                'deporte': '🏃',
                'ciencia': '🔬',
                'tecnología': '🔬',
                'tecnologia': '🔬',
                'novaceno': '🔬',
                'viaje': '✈️',
                'turismo': '✈️',
                'cultura': '🎭',
                'arte': '🎭',
                'programa': '📺',
                'serie': '📺',
                'tv': '📺',
                'televisión': '📺',
                'television': '📺',
                'alma': '❤️',
                'corazón': '❤️',
                'corazon': '❤️',
                'vida': '❤️',
                'gastronomía': '🍽️',
                'gastronomia': '🍽️',
                'comida': '🍽️',
                'cocina': '🍽️',
                'salud': '🏥',
                'medicina': '🏥'
            };
            
            for (const [keyword, icon] of Object.entries(iconMap)) {
                if (key.includes(keyword)) return icon;
            }
            
            return '📄';
        }

        // Funciones de filtrado y búsqueda
        function getFilteredNews() {
            let filteredNews = [...state.currentNewsData];

            if (state.currentSection !== 'todas') {
                filteredNews = filteredNews.filter(news => news.section === state.currentSection);
            }

            if (state.currentSearchTerm.length >= 2) {
                const searchLower = state.currentSearchTerm.toLowerCase();
                filteredNews = filteredNews.filter(news =>
                    news.title.toLowerCase().includes(searchLower) ||
                    news.summary.toLowerCase().includes(searchLower)
                );
            }

            return filteredNews;
        }

        function searchNews(searchTerm) {
            state.currentSearchTerm = searchTerm;
            displayNews();
        }

        // Funciones de visualización
        function displayNews() {
            const filteredNews = getFilteredNews();

            if (!filteredNews || filteredNews.length === 0) {
                elements.newsContainer.innerHTML = '<div class="error-message"><h3>⚠️ No se encontraron noticias</h3></div>';
                elements.statsText.textContent = 'No se encontraron noticias con los filtros actuales.';
                if (elements.loadingSpinner) elements.loadingSpinner.style.display = 'none';
                return;
            }

            const sectionName = state.currentSection === 'todas' ? 'Todas las secciones' : getSectionName(state.currentSection);
            elements.statsText.textContent = `Mostrando ${filteredNews.length} noticias de ${sectionName}`;
            if (elements.loadingSpinner) elements.loadingSpinner.style.display = 'none';

            window.currentFilteredNews = filteredNews;

            elements.newsContainer.innerHTML = filteredNews.map((item, index) => `
                <div class="news-item" data-index="${index}">
                    <div class="news-item-header">
                        <span class="news-source">${getSectionName(item.section)}</span>
                        <span class="news-date">${item.dateTime}</span>
                    </div>
                    <h3 class="news-headline">${highlightText(item.title, state.currentSearchTerm)}</h3>
                    <p class="news-summary">${highlightText(item.summary, state.currentSearchTerm)}</p>
                </div>
            `).join('');
            
            updateSectionsIndex();
        }

        function updateSectionsDropdown() {
            const sectionCounts = {};
            state.currentNewsData.forEach(news => {
                const section = news.section || 'general';
                sectionCounts[section] = (sectionCounts[section] || 0) + 1;
            });

            let dropdownHTML = `
                <div class="dropdown-item active" data-section="todas">
                    <span class="section-icon">📰</span>
                    <span class="section-name">Todas las secciones</span>
                    <span class="section-count">${state.currentNewsData.length}</span>
                </div>
            `;

            Object.keys(sectionCounts).sort().forEach(sectionKey => {
                const count = sectionCounts[sectionKey];
                if (count > 0) {
                    dropdownHTML += `
                        <div class="dropdown-item" data-section="${sectionKey}">
                            <span class="section-icon">${getSectionIcon(sectionKey)}</span>
                            <span class="section-name">${getSectionName(sectionKey)}</span>
                            <span class="section-count">${count}</span>
                        </div>
                    `;
                }
            });

            elements.dropdownMenu.innerHTML = dropdownHTML;
        }

        function updateSectionsIndex() {
            const filteredNews = getFilteredNews();
            const currentItem = document.querySelector(`.dropdown-item[data-section="${state.currentSection}"]`);
            if (currentItem) {
                currentItem.querySelector('.section-count').textContent = filteredNews.length;
            }
        }

        function changeSection(sectionKey) {
            state.currentSection = sectionKey;
            
            document.querySelectorAll('.dropdown-item').forEach(item => {
                item.classList.remove('active');
            });
            
            const selectedItem = document.querySelector(`.dropdown-item[data-section="${sectionKey}"]`);
            if (selectedItem) {
                selectedItem.classList.add('active');
                const dropdownText = document.querySelector('.dropdown-text');
                if (dropdownText) {
                    dropdownText.textContent = selectedItem.querySelector('.section-name').textContent;
                }
            }
            
            elements.dropdownMenu.classList.remove('show');
            elements.dropdownToggle.classList.remove('active');
            
            displayNews();
        }

        // Funciones de modal
        function handleNewsClick(event, index) {
            const news = window.currentFilteredNews[index];
            const readModeToggle = elements.readModeToggle;
            
            if (readModeToggle.checked) {
                showModal(news);
            } else {
                window.open(news.link, '_blank');
            }
        }

        async function showModal(news) {
            if (!elements.modalTitle || !elements.modalDate || !elements.modalContent || !elements.modalSourceLink || !elements.modal) {
                return;
            }

            elements.modalTitle.textContent = news.title;
            elements.modalDate.textContent = news.dateTime || '';
            elements.modalSourceLink.href = news.link;
            
            elements.modalContent.innerHTML = `
                <div class="article-content">
                    <h3>${news.title}</h3>
                    <p><strong>Resumen:</strong> ${news.summary}</p>
                    <div style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; text-align: center; color: #6c757d;">
                        <span style="font-size: 1.2em;">🔄</span> Cargando artículo completo...
                    </div>
                </div>
            `;
            elements.modal.style.display = 'block';

            setTimeout(async () => {
                try {
                    const html = await fetchWithProxies(news.link);
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    
                    let articleContent = '';
                    const contentElement = doc.querySelector('article, .article-body, [itemprop="articleBody"], .news-content, main');
                    if (contentElement) {
                        contentElement.querySelectorAll('a[href^="/"]').forEach(link => {
                            link.href = `https://www.elconfidencial.com${link.getAttribute('href')}`;
                        });
                        contentElement.querySelectorAll('.newsletter, .c-newsletter-box, .subscription-form').forEach(el => el.remove());
                        articleContent = contentElement.innerHTML;
                    } else {
                        const paragraphs = Array.from(doc.querySelectorAll('p')).slice(0, 15);
                        articleContent = paragraphs.map(p => p.outerHTML).join('');
                    }
                    
                    if (elements.modal.style.display === 'block') {
                        elements.modalContent.innerHTML = `<div class="article-content">${articleContent}</div>`;
                    }
                } catch (error) {
                    if (elements.modal.style.display === 'block') {
                        elements.modalContent.innerHTML = `
                            <div class="article-content">
                                <h3>${news.title}</h3>
                                <p><strong>Resumen:</strong> ${news.summary}</p>
                                <div style="margin: 20px 0; padding: 15px; background: #fff3cd; border-radius: 8px; color: #856404;">
                                    <p><strong>ℹ️ Artículo completo no disponible</strong></p>
                                    <p>Use el enlace al final para ver la noticia original en El Confidencial.</p>
                                </div>
                            </div>
                        `;
                    }
                }
            }, 100);
        }

        function closeModal() {
            if (elements.modal) {
                elements.modal.style.display = 'none';
            }
            if (elements.modalContent) {
                elements.modalContent.innerHTML = '';
            }
            if (elements.modalSourceLink) {
                elements.modalSourceLink.style.display = 'block';
                elements.modalSourceLink.textContent = 'Ver noticia original en El Confidencial';
            }
        }

        // Funciones de red
        async function fetchWithProxies(url) {
            try {
                const proxyUrl = CONFIG.CORS_PROXY + encodeURIComponent(url);
                const response = await fetch(proxyUrl);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                return await response.text();
            } catch (error) {
                throw new Error(`Error al cargar contenido: ${error.message}`);
            }
        }

        // Extracción y procesamiento de noticias
        function extractNewsItem(article) {
            const titleElement = article.querySelector('a[href*="/noticias/"], a[href*="/ultima-hora/"]') || 
                               article.querySelector('a') || 
                               article.querySelector('h1, h2, h3, h4, h5, h6') ||
                               article.querySelector('[class*="title"], [class*="headline"]');
            
            const linkElement = titleElement || article.querySelector('a[href]');
            
            if (!titleElement || !linkElement) {
                return null;
            }
            
            let title = titleElement.textContent?.trim() || '';
            let link = linkElement.href || linkElement.getAttribute('href');
            
            if (link && link.startsWith('/')) {
                link = 'https://www.elconfidencial.com' + link;
            }
            
            if (!title || title.length < 10 || !link) {
                return null;
            }
            
            // Filtrar títulos no deseados
            const lowerTitle = title.toLowerCase();
            const unwantedTitles = ['últimas noticias', 'ultimas noticias', 'suscríbete', 'iniciar sesión'];
            if (unwantedTitles.some(unwanted => lowerTitle.includes(unwanted))) {
                return null;
            }
            
            // Extraer resumen
            let summary = '';
            const summaryElement = article.querySelector('p:not([class*="time"]):not([class*="section"])') || 
                                 article.querySelector('.summary, .description, [class*="excerpt"]') ||
                                 article.querySelector('p');
            
            if (summaryElement) {
                summary = summaryElement.textContent?.trim() || '';
            }
            
            if (!summary || summary.length < 20) {
                summary = title.substring(0, 120) + '...';
            }
            
            // Extraer fecha/hora
            let dateTime = '';
            const timeElement = article.querySelector('.lastMinuteEntry__time') || article.querySelector('time');
            if (timeElement) {
                dateTime = timeElement.getAttribute('datetime') || timeElement.textContent.trim();
            }

            if (!dateTime) {
                const dateElement = article.querySelector('.c-time, .time, .date, [class*="timestamp"]');
                if (dateElement) {
                    dateTime = dateElement.textContent.trim();
                }
            }

            if (!dateTime) {
                const fullText = article.textContent || '';
                const timeMatch = fullText.match(/(\d{1,2}:\d{2}h?)|(Hace\s+\d+\s+(minuto|minutos|hora|horas))/i);
                if (timeMatch) {
                    dateTime = timeMatch[0];
                }
            }
            
            dateTime = formatDateTime(dateTime);

            // Extraer sección
            let section = 'general';
            const sectionElement = article.querySelector('.lastMinuteEntry__section') || 
                                 article.querySelector('.c-section, .section, .category, [class*="kicker"]');
            if (sectionElement) {
                section = sectionElement.textContent.trim().toLowerCase();
            } else {
                const positionElement = article.querySelector('.position_global');
                if (positionElement) {
                    const fullText = positionElement.textContent || '';
                    const lines = fullText.split('\n').map(l => l.trim()).filter(l => l.length > 2 && l.length < 30 && isNaN(l));
                    if(lines.length > 0) {
                        const titleText = titleElement.textContent.trim();
                        const titleIndex = lines.indexOf(titleText);
                        if (titleIndex > 0) {
                            section = lines[titleIndex - 1].toLowerCase();
                        }
                    }
                }
            }
            
            return {
                title,
                link,
                summary,
                dateTime,
                section,
                source: 'El Confidencial',
                publishDate: new Date()
            };
        }

        async function loadNews() {
            showLoading();
            
            try {
                const html = await fetchWithProxies(CONFIG.ELCONFIDENCIAL_URL);
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                const newsItems = [];
                const articles = doc.querySelectorAll('.position_global, [class*="lastMinuteEntry"], [class*="position_global"]');

                articles.forEach((article) => {
                    const newsItem = extractNewsItem(article);
                    if (newsItem) {
                        newsItems.push(newsItem);
                    }
                });
                
                // Método alternativo si no se encuentran noticias
                if (newsItems.length === 0) {
                    const allLinks = doc.querySelectorAll('a[href^="/"]');
                    allLinks.forEach((link) => {
                        const title = link.textContent?.trim() || '';
                        let href = link.getAttribute('href');
                        
                        if (href && href.startsWith('/')) {
                            href = 'https://www.elconfidencial.com' + href;
                        }
                        
                        if (!title || title.length < 15 || !href) return;
                        
                        const lowerTitle = title.toLowerCase();
                        const unwantedTitles = ['últimas noticias', 'ultimas noticias', 'noticias', 'menú', 'menu', 'cerrar', 'suscríbete', 'iniciar sesión'];
                        if (unwantedTitles.some(unwanted => lowerTitle.includes(unwanted))) return;
                        
                        newsItems.push({
                            title: title,
                            link: href,
                            summary: title.substring(0, 100) + '...',
                            dateTime: 'Hace unos minutos',
                            section: 'general',
                            source: 'El Confidencial',
                            publishDate: new Date()
                        });
                    });
                }
                
                state.currentNewsData = newsItems;
                
                updateSectionsDropdown();
                
                if (state.currentNewsData.length === 0) {
                    showError('No se encontraron noticias en la página.');
                } else {
                    displayNews();
                }
                
            } catch (error) {
                showError(`Error: ${error.message}`);
            }
        }

        // Event listeners
        function setupEventListeners() {
            // Clics en noticias
            elements.newsContainer.addEventListener('click', (event) => {
                const newsItem = event.target.closest('.news-item');
                if (newsItem && newsItem.dataset.index) {
                    const index = parseInt(newsItem.dataset.index, 10);
                    handleNewsClick(event, index);
                }
            });
            
            // Dropdown de secciones
            elements.dropdownToggle.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                elements.dropdownMenu.classList.toggle('show');
                elements.dropdownToggle.classList.toggle('active');
            });
            
            elements.dropdownMenu.addEventListener('click', (e) => {
                const dropdownItem = e.target.closest('.dropdown-item');
                if (dropdownItem) {
                    const sectionKey = dropdownItem.dataset.section;
                    if (sectionKey) {
                        changeSection(sectionKey);
                    }
                }
            });

            document.addEventListener('click', (e) => {
                if (!elements.dropdownToggle.contains(e.target) && !elements.dropdownMenu.contains(e.target)) {
                    elements.dropdownMenu.classList.remove('show');
                    elements.dropdownToggle.classList.remove('active');
                }
            });
            
            // Buscador
            elements.searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value.trim();
                elements.searchClear.style.display = searchTerm ? 'block' : 'none';
                clearTimeout(state.searchTimeout);
                state.searchTimeout = setTimeout(() => searchNews(searchTerm), CONFIG.SEARCH_DEBOUNCE);
            });
            
            elements.searchClear.addEventListener('click', () => {
                elements.searchInput.value = '';
                elements.searchClear.style.display = 'none';
                searchNews('');
            });

            // Modal
            elements.closeModal.addEventListener('click', closeModal);
            elements.modal.addEventListener('click', (e) => {
                if (e.target === elements.modal) closeModal();
            });

            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && elements.modal && elements.modal.style.display === 'block') {
                    closeModal();
                }
            });
        }

        // Inicialización de la aplicación
        function initApp() {
            initDOMCache();
            
            // Verificar elementos críticos
            const criticalElements = ['newsContainer', 'statsText', 'loadingSpinner', 'searchInput', 'searchClear', 'dropdownToggle', 'dropdownMenu', 'modal', 'closeModal'];
            const missingElements = criticalElements.filter(key => !elements[key]);
            
            if (missingElements.length > 0) {
                console.error('Elementos críticos no encontrados:', missingElements);
                return;
            }
            
            setupEventListeners();
            loadNews();

            // Actualización automática
            setInterval(loadNews, CONFIG.AUTO_REFRESH);
        }

        // Inicializar cuando el DOM esté listo
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initApp);
        } else {
            initApp();
        }
    </script>
</body>
</html>
